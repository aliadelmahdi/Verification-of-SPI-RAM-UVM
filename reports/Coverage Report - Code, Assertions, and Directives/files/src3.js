var g_data = {"name":"design/SPI_Assertions/SPI_slave_sva.sv","src":"/*  \n    This assertion file follows the **Verification Plan** numbering  \n    Each section corresponds to a specific verification requirement\n\n    The numbers (e.g., 1, 2.2) match the corresponding test items  \n    from the **Verification Plan** for traceability and clarity\n*/\n`include \"spi_defines.svh\" // For macros\nimport shared_pkg::*; // For enums and parameters\n`timescale `TIME_UNIT / `TIME_PRECISION\n\nmodule SPI_slave_sva(cs,MOSI,SS_n,clk,rst_n,tx_data,tx_valid,MISO,rx_data,rx_valid);\n    \n    input MOSI,clk,rst_n,SS_n,tx_valid;\n    input [MEM_WIDTH-1:0] tx_data;\n\n	input logic MISO,rx_valid;\n	input logic [MEM_WIDTH+1:0] rx_data;\n    input logic [2:0] cs;\n\n    //** 1: Reset Verification **\\\\\n\n    // 1.2: Reset Current State\n    property check_reset;\n            (!rst_n)|=> (cs == IDLE);\n                      \n    endproperty\n    assert_reset: assert property (@(posedge clk) check_reset)\n        else $error(\"Failed to assert reset, the current state at reset is not IDLE\");\n\n    //** 3: FSM transitions **\\\\\n\n    //aserted => slave not selected\n\n    // 3.1: Transition from IDLE to CHK_CMD\n    property check_idle_to_chk_cmd;\n        @(posedge clk) disable iff(!rst_n)\n                (cs==IDLE && SS_n==SLAVE_SELECTED) |=> (cs == CHK_CMD);\n    endproperty\n\n    assert_idle_to_chk_cmd: assert property (check_idle_to_chk_cmd)\n        else $error(\"Failed to move to CHK_CMD state when slave is selected at IDLE state\");\n\n    // 3.1.1: Transition from IDLE to IDLE\n    property check_idle_to_idle;\n        @(posedge clk) disable iff(!rst_n)\n                (cs==IDLE && SS_n==SLAVE_NOT_SELECTED) |=> (cs == IDLE);\n    endproperty\n\n    assert_idle_to_idle: assert property (check_idle_to_idle)\n        else $error(\"Failed to stay at IDLE state when the slave isn't selected\");\n\n    // 3.2: Transition from CHK_CMD to IDLE\n    property check_chk_cmd_to_idle;\n        @(posedge clk) disable iff(!rst_n)\n                (cs==CHK_CMD && SS_n==SLAVE_NOT_SELECTED) |=> (cs == IDLE);\n    endproperty\n\n    assert_chk_cmd_to_idle: assert property (check_chk_cmd_to_idle)\n        else $error(\"Failed to move to IDLE state when slave isn't selected at CHK_CMD state\");\n\n    // 3.2.1: Transition from CHK_CMD to WRITE\n    property check_chk_cmd_to_write;\n        @(posedge clk) disable iff(!rst_n)\n                (cs==CHK_CMD && SS_n==SLAVE_SELECTED && !MOSI) |=> (cs == WRITE);\n    endproperty\n\n    assert_chk_cmd_to_write: assert property (check_chk_cmd_to_write)\n        else $error(\"Failed to move to WRITE state when slave is selected and MOSI is deasserted at CHK_CMD state\");\n\n    // 3.2.2: Transition from CHK_CMD to READ_DATA\n    property check_chk_cmd_to_read_data;\n        @(posedge clk) disable iff(!rst_n)\n                (cs==CHK_CMD && SS_n==SLAVE_NOT_SELECTED) |=> (cs == READ_DATA);\n    endproperty\n\n    assert_chk_cmd_to_read_data: assert property (check_chk_cmd_to_read_data)\n        else $error(\"Failed to move to READ_DATA state when slave is not selected at CHK_CMD state\");\n\n    // 3.2.3: Transition from CHK_CMD to READ_ADD\n    property check_chk_cmd_to_read_add;\n        @(posedge clk) disable iff(!rst_n)\n                (cs==CHK_CMD && SS_n==SLAVE_NOT_SELECTED) |=> (cs == READ_ADD);\n    endproperty\n\n    assert_chk_cmd_to_read_add: assert property (check_chk_cmd_to_read_add)\n        else $error(\"Failed to move to READ_ADD state when slave is not selected at CHK_CMD state\");\n\n    // 3.3: Transition from READ_ADD to IDLE\n    property check_read_add_to_idle;\n        @(posedge clk) disable iff(!rst_n)\n                (cs==READ_ADD && SS_n==SLAVE_NOT_SELECTED) |=> (cs == IDLE);\n    endproperty\n\n    assert_read_add_to_idle: assert property (check_read_add_to_idle)\n        else $error(\"Failed to move to IDLE state when slave isn't selected at READ_ADD state\");\n\n    // 3.3.1: Transition from READ_ADD to READ_ADD\n    property check_read_add_to_read_add;\n        @(posedge clk) disable iff(!rst_n)\n                (cs==READ_ADD && SS_n==SLAVE_SELECTED) |=> (cs == READ_ADD);\n    endproperty\n\n    assert_read_add_to_read_add: assert property (check_read_add_to_read_add)\n        else $error(\"Failed to stay at READ_ADD state when slave is selected at READ_ADD state\");\n\n     // 3.4: Transition from READ_DATA to IDLE\n    property check_read_data_to_idle;\n        @(posedge clk) disable iff(!rst_n)\n                (cs==READ_DATA && SS_n==SLAVE_NOT_SELECTED) |=> (cs == IDLE);\n    endproperty\n\n    assert_read_data_to_idle: assert property (check_read_data_to_idle)\n        else $error(\"Failed to move to IDLE state from READ_DATA state when the slave is not selected\");\n       \n      // 3.4.1: Transition from READ_DATA to READ_DATA\n    property check_read_data_to_read_data;\n        @(posedge clk) disable iff(!rst_n)\n                (cs==READ_DATA && SS_n==SLAVE_SELECTED) |=> (cs == READ_DATA);\n    endproperty\n\n    assert_read_data_to_read_data: assert property (check_read_data_to_read_data)\n        else $error(\"Failed to stay at READ_DATA state when slave is selected at READ_DATA state\");\n\n    // 3.5: Transition from WRITE to IDLE\n    property check_write_to_idle;\n        @(posedge clk) disable iff(!rst_n)\n                (cs==WRITE && SS_n==SLAVE_NOT_SELECTED) |=> (cs == IDLE);\n    endproperty\n\n    assert_write_to_idle: assert property (check_write_to_idle)\n        else $error(\"Failed to move to IDLE state from WRITE state when the slave is not selected\");\n\n    // 3.5.1: Transition from WRITE to WRITE\n    property check_write_to_write;\n        @(posedge clk) disable iff(!rst_n)\n                (cs==WRITE && SS_n==SLAVE_SELECTED) |=> (cs == WRITE);\n    endproperty\n\n    assert_write_to_write: assert property (check_write_to_write)\n        else $error(\"Failed to stay at WRITE state when slave isn't selected at WRITE state\");\n\n    //** 4: Signals at the FSM states **\\\\\n\n        //asserted => slave not selected\n\n        // 4.1: Signals at IDLE state\n        property check_idle;\n            @(posedge clk) disable iff(!rst_n)\n                    (cs==IDLE) |=> (!MISO);\n        endproperty\n\n        assert_idle: assert property (check_idle)\n            else $error(\"Mismatch in signals at IDLE state\");\n\n        // // 4.2: Signals at CHK_CMD state\n        // property check_chk_cmd;\n        //     @(posedge clk) disable iff(!rst_n)\n        //             (cs==CHK_CMD) |=> (!MISO);\n        // endproperty\n\n        // assert_chk_cmd: assert property (check_chk_cmd)\n        //     else $error(\"Mismatch in signals at CHK_CMD state\");\n\n        // // 4.3: Signals at WRITE state\n        // property check_write;\n        //     @(posedge clk) disable iff(!rst_n)\n        //             (cs==WRITE) |=> (MISO);\n        // endproperty\n\n        // assert_write: assert property (check_write)\n        //     else $error(\"Mismatch in signals at WRITE state\");\n\n        // // 4.4: Signals at READ_DATA state\n        // property check_read_data;\n        //     @(posedge clk) disable iff(!rst_n)\n        //             (cs==READ_DATA) |=> (MISO );\n        // endproperty\n\n        // assert_read_data: assert property (check_read_data)\n        //     else $error(\"Mismatch in signals at READ_DATA state\");\n\n        // // 4.5: Signals at READ_ADD state\n        // property check_read_add;\n        //     @(posedge clk) disable iff(!rst_n)\n        //             (cs==READ_ADD) |=> (MISO );\n        // endproperty\n\n        // assert_read_add: assert property (check_read_add)\n        //     else $error(\"Mismatch in signals at READ_ADD state\");\n\n        // //** 5: SPI Slave **\\\\\n\n        // //aserted => slave not selected\n\n        // // 5.1: Serial to Parallel\n        // property check_serial_to_parallel;\n        //     @(posedge clk) disable iff(!rst_n)\n        //             (cs==READ_ADD) |=> (MISO );\n        // endproperty\n\n        // assert_serial_to_parallel: assert property (check_serial_to_parallel)\n        //     else $error(\"\");\n\n        // // 5.2: Data is ready\n        // property check_rx_valid;\n        //     @(posedge clk) disable iff(!rst_n)\n        //             (cs==READ_ADD) |=> (MISO );\n        // endproperty\n\n        // assert_rx_valid: assert property (check_rx_valid)\n        //     else $error(\"\");\n\n        // // 5.3: Parallel to Serial\n        // property check_miso;\n        //     @(posedge clk) disable iff(!rst_n)\n        //             (cs==READ_ADD) |=> (MISO );\n        // endproperty\n\n        // assert_miso: assert property (check_miso)\n        //     else $error(\"\");\nendmodule","lang":"verilog"};
processSrcData(g_data);