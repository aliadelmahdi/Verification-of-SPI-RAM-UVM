var g_data = {"name":"./design/SPI_design/Designer RTL/SPI_ram.v","src":"`ifndef RAM_SYNC_SINGLE_PORT_SV\n`define RAM_SYNC_SINGLE_PORT_SV\n\nmodule RAM_Sync_Single_port #(\n  /*------------Parameters------------*/\n    parameter MEM_DEPTH = 256,         /*  Memory depth */\n    parameter ADD_SIZE = 8            /* Address size based upon the memory depth */\n)(\n  /*--------------Inputs--------------*/\n  input  [9:0]din,    /* Data input, din[9] detemines write or read, 0 => Write, 1 => read\n                       * din[9:8] = 00 => Write, Hold din[7:0] internally as write address\n                       * din[9:8] = 01 => Write, write din[7:0] in the memory with wr address held previously\n                       * din[9:8] = 10 => Read, Hold din[7:0] internally as Read address\n                       * din[9:8] = 01 => Read the memory with rd address held previously,tx_valid = HIGH,\n                       *                  dout holds the word read from the memory, ignore din[7:0]     */\n  input  clk,         /*  clock signal input */\n  input  arst_n,      /*  active low asynchronous reset */\n  input  rx_valid,    /*  if HIGH: accept din[7:0] to save the wr/rd address internally or write a memory word */\n  /*--------------outputs-------------*/\n  output reg [7:0]dout,            /* data out of Ram */\n  output reg tx_valid              /*  Whenever the command is memory read, the tx_valid should be HIGH */\n);\n  /* internal bus to hold the address internally */\n  reg [ADD_SIZE-1:0]addr_internal;\n\n  /* memory declaration */\n  (* ram_style = \"block\" *)reg [7:0]mem[MEM_DEPTH-1:0];\n\n\n  always @(posedge clk) begin\n    if(~arst_n)begin\n      dout <= 0;\n      tx_valid <= 0;\n    end else if(rx_valid) begin\n      tx_valid<=0; // Fixed\n      case (din[9:8])\n          2'b00 :\n            /* Write operation - hold the write address */ \n            addr_internal <= din[7:0];\n          2'b01 : \n            /* Write operation - write data to memory in the internal address held previously  */ \n            mem[addr_internal] <= din[7:0];\n          2'b10 : \n            /* Read operation - hold the read address */ \n            addr_internal <= din[7:0];\n          2'b11 : begin\n            /* Read operation - read data from memory mem[addr_internal]  */ \n            dout <= mem[addr_internal];\n            tx_valid <= 1;\n          end\n          default: begin\n            /* deafult case  */ \n            dout <= 0;\n            tx_valid <= 0;\n          end\n      endcase\n    end else begin\n      /* reset tx_valid when the rx_valid is low */\n      tx_valid <= 0;\n    end\n  end \n\nendmodule\n\n`endif // RAM_SYNC_SINGLE_PORT_SV","lang":"verilog"};
processSrcData(g_data);